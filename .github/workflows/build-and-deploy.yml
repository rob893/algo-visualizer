# This workflow fires off of pushes to master branch. If the head commit message contains '[ci skip]', the whole workflow will be skipped.
#
# Secrets used:
# REMOTE_USER: to user to ssh into the remote server as
# REMOTE_HOST: the IP/Domain to ssh into
# SERVER_SSH_KEY: the private key that matches the public key on the remote server
# KNOWN_HOSTS: the known hosts. Run `ssh-keyscan {{ IP/Domain }}` to obtain this

name: Build and Deploy

on:
  push:
    branches: [master]

defaults:
  run:
    working-directory: app

jobs:
  build:
    name: Build Project
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Use cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install WASM Pack
        uses: jetli/wasm-pack-action@v0.3.0
      - name: Build WASM
        run: cd .. && npm run build-wasm 
      - name: Install packages
        run: npm i
      - name: Build project
        run: npm run build
      - name: Get build version
        uses: tyankatsu0105/read-package-version-actions@v1
        id: package-version
      - name: Echo Version
        run: ls && echo ${{ steps.package-version.outputs.version }}
      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: algo-visualizer-b${{ github.run_number }}-v${{ steps.package-version.outputs.version }}
          path: app/build/

  deploy-digital-ocean:
    name: Deploy to Digital Ocean Server
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      - name: Test Connection
        run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'ls'
      - name: Clean remote directories
        run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'mkdir -p /var/www/html/algo-visualizer && rm -rf /var/www/html/algo-visualizer/* '
      - name: Copy builds to remote server
        run: scp -r ./algo-visualizer-b${{ github.run_number }}-v*/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/var/www/html/algo-visualizer

  deploy-github-pages:
    name: Deploy to Github Pages
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Download build artifacts
        uses: actions/download-artifact@v2
      - name: Copy to build directory
        run: cp -r algo-visualizer-b${{ github.run_number }}-v* dist
      - name: Deploy to Github Pages
        uses: JamesIves/github-pages-deploy-action@v4.2.2
        with:
          branch: gh-pages
          folder: dist
